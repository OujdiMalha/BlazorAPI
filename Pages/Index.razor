@page "/"
@using Models
@using Util
@using System.Text.Json
@inject PokeClient client
@inject NavigationManager NavigationManagerService
@inject IJSRuntime JSRuntime

<!-- Ajoutez la référence à la bibliothèque d'icônes -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div class="body">
    <button class="pokemon-button" @onclick="GoToFavoritePage">Go to Favorites</button>
    <div class="container">
        <img src="/img/BlazorAPI.png" alt="app title" class="app-title" />
        <div class="pokemon-row">
            @foreach (var pokemon in pokemonList)
            {
                <a href="/pokemon/@pokemon.id">
                    <div class="pokemon-card">
                        <img src="@pokemon.sprites.front_default" alt="Pokemon Sprite">
                        <h4 class="pokemon-name">@pokemon.name</h4>
                        <div class="type-row">
                            @foreach (var type in pokemon.types)
                            {
                                <span class="type-badge"
                                      style="background-color: @PokeColor.GetTypeColor(@type.type.name)">@type.type.name</span>
                            }
                        </div>
                        <div class="action-buttons">
                            <!-- Icône "Favorite" -->
                            <i class="fas fa-star" @onclick:preventDefault @onclick="() => ToggleFavorite(pokemon)" style="color: @(pokemon.IsFavorite ? "red" : "white")"></i>


                            <!-- Icône "Delete" -->
                            <i class="fas fa-trash-alt" @onclick:preventDefault @onclick="() => DeletePokemon(pokemon)"></i>

                            <!-- Icône "Edit" -->
                            <i class="fas fa-edit" @onclick:preventDefault @onclick="() => EditPokemon(pokemon)"></i>
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
</div>

@code {
    List<Pokemon> pokemonList = new List<Pokemon>();

    protected override async Task OnInitializedAsync()
    {
        for (int i = 1; i < 21; i++)
        {
            pokemonList.Add(await client.GetPokemon(i.ToString()));
        }
    }

    // Fonction pour mettre en favori un Pokémon
    async Task ToggleFavorite(Pokemon pokemon)
    {
        pokemon.IsFavorite = !pokemon.IsFavorite; // Bascule l'état du favori

        // Récupère les Pokémon favoris depuis le stockage local du navigateur
        var favoritesJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "favorites");
        var favoritePokemonIds = favoritesJson != null ? JsonSerializer.Deserialize<List<int>>(favoritesJson) : new List<int>();

        if (pokemon.IsFavorite)
        {
            // Ajoute l'ID du Pokémon à la liste des favoris s'il n'est pas déjà présent
            if (!favoritePokemonIds.Contains(pokemon.id))
                favoritePokemonIds.Add(pokemon.id);
        }
        else
        {
            // Retire l'ID du Pokémon de la liste des favoris s'il est présent
            favoritePokemonIds.Remove(pokemon.id);
        }

        // Convertit la liste d'IDs de favoris en format JSON et la sauvegarde dans le stockage local
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "favorites", JsonSerializer.Serialize(favoritePokemonIds));

        // Rafraîchit l'affichage
        StateHasChanged();
    }

    void GoToFavoritePage()
    {
        NavigationManagerService.NavigateTo("/favoritepokemon");
    }

    // Fonction pour supprimer un Pokémon
    async Task DeletePokemon(Pokemon pokemon)
    {
        pokemonList.Remove(pokemon); // Supprime le Pokémon de la liste

        // Appel asynchrone à votre backend pour supprimer le Pokémon de votre base de données
        await client.DeletePokemon(pokemon.id);
    }

    // Fonction pour modifier un Pokémon
    void EditPokemon(Pokemon pokemon)
    {
        // Ici, vous pouvez ouvrir une boîte de dialogue de modification
        // ou naviguer vers une page de modification avec les données du Pokémon

        // Par exemple, vous pouvez stocker l'ID du Pokémon sélectionné pour la modification
        int pokemonId = pokemon.id;

        // Ensuite, vous pouvez naviguer vers une autre page pour la modification
        // Notez que vous devrez créer cette page de modification dans votre application
        // et transmettre l'ID du Pokémon à modifier comme paramètre
        NavigationManagerService.NavigateTo($"/editpokemon/{pokemonId}");
    }
} 